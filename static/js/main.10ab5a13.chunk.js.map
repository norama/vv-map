{"version":3,"sources":["util/query.js","components/constants.js","components/chart/configChart.js","util/date.js","api/fetchWeather.js","components/Loader.js","components/Chart.js","components/Weather.js","components/parameters/DateRange.js","components/parameters/Location.js","components/Parameters.js","Main.js","serviceWorker.js","index.js"],"names":["Params","init","name","defaultValue","value","URLSearchParams","useQuery","useLocation","search","defaultName","query","get","LONDON_LATLNG","FONT","configCircleBullet","bullet","circle","createChild","am4core","width","height","horizontalCenter","verticalCenter","states","create","properties","scale","configWindBullet","showSize","propertyFields","rotation","arrow","strokeWidth","strokeOpacity","direction","fillOpacity","hoverState","configTemperatureAxis","temperatureAxis","title","text","fontWeight","fontFamily","renderer","minGridDistance","configChart","chart","startDate","endDate","leftAxesContainer","layout","rightAxesContainer","preloader","disabled","paddingRight","colors","list","dateAxis","grid","template","beforeStartDate","subDays","Date","setHours","afterEndDate","addDays","min","getTime","max","labels","location","tooltipDateFormat","groupData","groupCount","groupIntervals","setAll","timeUnit","count","configDateAxis","xAxes","push","am4charts","percentAxis","yAxes","configPercentAxis","marginTop","marginBottom","temperatureAxis2","opposite","speedAxis","configSpeedAxis","scrollbarX","series","dataFields","dateX","valueY","tooltipText","startLocation","configMinDayTemperatureSeries","yAxis","configMaxDayTemperatureSeries","minBulletDistance","bullets","configDewPointSeries","configHumiditySeries","line","stroke","fill","configWindSpeedSeries","legend","reverseOrder","markerTemplate","markers","position","fontSize","cursor","dateString","date","format","fetchWeather","dateRange","dateRanges","start","end","isSameMonth","x","endOfMonth","byMonths","Promise","all","map","fetch","process","lat","lng","then","response","json","responses","reduce","acc","data","weather","Loader","size","loading","className","sizeUnit","color","theme","Chart","useState","setLoading","useEffect","certain","tooltipContainer","background","createCertain","show","weatherData","setTimeout","hide","dispose","millis","forEach","day","i","hourly","hour","item","DewPointC","Humidity","humidity","WeatherPictogram","WindPictogram","weatherDesc","length","weatherIconUrl","winddirDegree","windspeedKmph","mintempC","maxtempC","id","displayedDate","str","Weather","parameters","setParameters","to","Button","type","onClick","href","target","rel","DateRange","onChange","popoverOpen","setPopoverOpen","outline","Popover","placement","isOpen","toggle","open","PopoverBody","showSelectionPreview","moveRangeOnFirstSelection","maxDate","months","ranges","key","selection","DefaultIcon","L","icon","iconUrl","shadowUrl","iconShadow","iconSize","shadowSize","iconAnchor","shadowAnchor","popupAnchor","Marker","prototype","options","Location","latlng","handleChange","result","center","zoom","zoomControl","layers","tileLayer","attribution","control","addTo","geocoder","Control","Geocoder","Nominatim","geocoderControl","collapsed","suggestMinLength","placeholder","on","e","geocode","_expand","_toggle","_geocode","searchInput","document","querySelector","markGeocode","bbox","latLngBounds","html","results","latLng","focus","event","reverse","Parameters","setWeather","parseFloat","setDateRange","setLocation","toFixed","Main","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.10ab5a13.chunk.js","sourcesContent":["import { useLocation } from 'react-router-dom';\r\n\r\nclass Params extends URLSearchParams {\r\n    constructor(init) {\r\n        super(init);\r\n    }\r\n\r\n    get(name, defaultValue=null) {\r\n        const value = super.get(name);\r\n        return value !== null ? value : defaultValue;\r\n    }\r\n}\r\n\r\n// A custom hook that builds on useLocation to parse\r\n// the query string for you.\r\nexport function useQuery() {\r\n    return new Params(useLocation().search);\r\n}\r\n\r\nconst LONDON_NAME = 'London';\r\n\r\nexport function defaultName(query) {\r\n    return query.get(\"lat\") || query.get(\"lng\") ? \"\" : LONDON_NAME;\r\n}","\r\nexport const START_DATE = '2020-03-01';\r\nexport const END_DATE = '2020-03-31';\r\n\r\nexport const LONDON_LATLNG = {\r\n    lat: '51.533',\r\n    lng: '-0.129'\r\n};","\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\n\r\nimport { addDays, subDays, format } from 'date-fns';\r\n\r\nconst DEGREE = \"\\u00B0\";\r\nconst FONT = \"DejaVu Sans Mono\";\r\n\r\nfunction configCircleBullet(bullet) {\r\n    var circle = bullet.createChild(am4core.Circle);\r\n    circle.width = 5;\r\n    circle.height = 5;\r\n    circle.horizontalCenter = \"middle\";\r\n    circle.verticalCenter = \"middle\";\r\n\r\n    var hoverState = bullet.states.create(\"hover\");\r\n    hoverState.properties.scale = 2;\r\n}\r\n\r\nfunction configWeatherBullet(bullet) {\r\n    var image = bullet.createChild(am4core.Image);\r\n    image.propertyFields.href = \"weatherIconUrl\";\r\n    // image.tooltipText = \"{desc}\";\r\n\r\n    image.width = 15;\r\n    image.height = 15;\r\n    image.horizontalCenter = \"middle\";\r\n    image.verticalCenter = \"middle\";\r\n\r\n    var hoverState = bullet.states.create(\"hover\");\r\n    hoverState.properties.scale = 3;\r\n}\r\n\r\nfunction configWindBullet(bullet, showSize=true) {\r\n\r\n    // Bind `rotation` property to `angle` field in data\r\n    bullet.propertyFields.rotation = \"winddirDegree\";\r\n\r\n    // Add a triangle to act as am arrow\r\n    var arrow = bullet.createChild(am4core.Triangle);\r\n    arrow.horizontalCenter = \"middle\";\r\n    arrow.verticalCenter = \"bottom\";\r\n    //arrow.stroke = am4core.color(\"#fff\");\r\n    arrow.strokeWidth = 1;\r\n    arrow.strokeOpacity = 0.7;\r\n    arrow.direction = \"top\";\r\n    arrow.scale = 2;\r\n    arrow.width = 5;\r\n    if (showSize) {\r\n        arrow.propertyFields.height = \"windspeedKmph\";\r\n    } else {\r\n        arrow.height = 10;\r\n    }\r\n    arrow.fillOpacity = 0.5;\r\n\r\n    var hoverState = bullet.states.create(\"hover\");\r\n    hoverState.properties.scale = 2;\r\n}\r\n\r\nfunction configDateAxis(dateAxis, startDate, endDate) {\r\n    dateAxis.renderer.grid.template.disabled = true;\r\n    //dateAxis.renderer.labels.template.disabled = true;\r\n\r\n    let beforeStartDate = subDays(new Date(startDate), 1);\r\n    beforeStartDate.setHours(18);\r\n\r\n    let afterEndDate = addDays(new Date(endDate), 1);\r\n    afterEndDate.setHours(6);\r\n\r\n    dateAxis.min = beforeStartDate.getTime();\r\n    dateAxis.max = afterEndDate.getTime();\r\n\r\n    dateAxis.renderer.labels.template.location = 0.5;\r\n\r\n    dateAxis.tooltipDateFormat = \"MM-dd:HH\";\r\n\r\n    dateAxis.groupData = true;\r\n    dateAxis.groupCount = 300;\r\n    dateAxis.groupIntervals.setAll([\r\n        { timeUnit: \"hour\", count: 1 },\r\n        { timeUnit: \"hour\", count: 3 },\r\n        { timeUnit: \"hour\", count: 6 },\r\n        { timeUnit: \"hour\", count: 12 },\r\n        { timeUnit: \"month\", count: 1 },\r\n        { timeUnit: \"year\", count: 1 },\r\n        { timeUnit: \"year\", count: 10 }\r\n    ]);\r\n}\r\n\r\nfunction configPictogramAxis(pictogramAxis) {\r\n    pictogramAxis.renderer.grid.template.disabled = true;\r\n    pictogramAxis.renderer.labels.template.disabled = true;\r\n    pictogramAxis.tooltip.disabled = true;\r\n    pictogramAxis.renderer.baseGrid.disabled = true;\r\n    pictogramAxis.renderer.maxHeight = 60;\r\n    pictogramAxis.min = 0;\r\n    pictogramAxis.max = 3;\r\n    pictogramAxis.renderer.minGridDistance = 10;\r\n}\r\n\r\nfunction configSpeedAxis(speedAxis) {\r\n    speedAxis.title.text = \"Speed (km/h)\";\r\n    speedAxis.title.fontWeight = 700;\r\n    speedAxis.title.fontFamily = FONT;\r\n    speedAxis.min = -20;\r\n    speedAxis.max = 120;\r\n    speedAxis.renderer.minGridDistance = 30;\r\n}\r\n\r\nfunction configPercentAxis(percentAxis) {\r\n    percentAxis.title.text = \"Percent (%)\";\r\n    percentAxis.title.fontWeight = 700;\r\n    percentAxis.title.fontFamily = FONT;\r\n    percentAxis.min = 0;\r\n    percentAxis.max = 100;\r\n    percentAxis.renderer.minGridDistance = 30;\r\n}\r\n\r\nfunction configTemperatureAxis(temperatureAxis) {\r\n    temperatureAxis.title.text = \"Temperature (\" + DEGREE + \"C)\";\r\n    temperatureAxis.title.fontWeight = 700;\r\n    temperatureAxis.title.fontFamily = FONT;\r\n    //temperatureAxis.min = -30;\r\n    //temperatureAxis.max = 40;\r\n    temperatureAxis.renderer.minGridDistance = 30;\r\n}\r\n\r\nfunction configMinDayTemperatureSeries(series) {\r\n    series.name = \"Min. day temperature\";\r\n    series.dataFields.dateX = \"date\";\r\n    series.dataFields.valueY = \"mintempC\";\r\n    series.tooltipText = \"Min.: {valueY.value} \" + DEGREE + \"C\";\r\n    series.startLocation = 0.5;\r\n    //let bullet = series.bullets.push(new am4charts.Bullet());\r\n    //configTemperatureBullet(bullet);\r\n}\r\n\r\nfunction configMaxDayTemperatureSeries(series) {\r\n    series.name = \"Max. day temperature\";\r\n    series.dataFields.dateX = \"date\";\r\n    series.dataFields.valueY = \"maxtempC\";\r\n    series.tooltipText = \"Max.: {valueY.value} \" + DEGREE + \"C\";\r\n    series.startLocation = 0.5;\r\n    //let bullet = series.bullets.push(new am4charts.Bullet());\r\n    //configTemperatureBullet(bullet);\r\n}\r\n\r\nfunction configDewPointSeries(series) {\r\n    series.name = \"Dew point\";\r\n    series.dataFields.dateX = \"date\";\r\n    series.dataFields.valueY = \"DewPointC\";\r\n    series.tooltipText = \"DewPoint: {valueY.value} \" + DEGREE + \"C\";\r\n    series.strokeWidth = 3;\r\n\r\n    series.minBulletDistance = 5;\r\n    let bullet = series.bullets.push(new am4charts.Bullet());\r\n    configCircleBullet(bullet);\r\n}\r\n\r\nfunction configHumiditySeries(series) {\r\n    series.name = \"Relative humidity (%)\";\r\n    series.dataFields.dateX = \"date\";\r\n    series.dataFields.valueY = \"Humidity\";\r\n    series.tooltipText = \"Humidity: {valueY.value} %\";\r\n    series.strokeWidth = 3;\r\n\r\n    series.minBulletDistance = 5;\r\n    let bullet = series.bullets.push(new am4charts.Bullet());\r\n    configCircleBullet(bullet);\r\n}\r\n\r\nfunction configWeatherPictogramSeries(series) {\r\n    series.name = \"Weather\";\r\n    series.dataFields.dateX = \"date\";\r\n    series.dataFields.valueY = \"WeatherPictogram\";\r\n    series.dataFields.desc = \"weatherDesc\";\r\n    series.strokeWidth = 0;\r\n    series.minBulletDistance = 15;\r\n    let bullet = series.bullets.push(new am4charts.Bullet());\r\n    configWeatherBullet(bullet);\r\n}\r\n\r\nfunction configWindPictogramSeries(series) {\r\n    series.name = \"Wind\";\r\n    series.dataFields.dateX = \"date\";\r\n    series.dataFields.valueY = \"WindPictogram\";\r\n    series.tooltipText = \"Wind ({winddirDegree}\" + DEGREE + \"): {windspeedKmph} km/h\";\r\n    series.strokeWidth = 0;\r\n    let bullet = series.bullets.push(new am4charts.Bullet());\r\n    configWindBullet(bullet, true);\r\n}\r\n\r\nfunction configWindSpeedSeries(series) {\r\n    series.name = \"Wind\";\r\n    series.dataFields.dateX = \"date\";\r\n    series.dataFields.valueY = \"windspeedKmph\";\r\n    series.tooltipText = \"wind ({winddirDegree}\" + DEGREE + \"): {windspeedKmph} km/h\";\r\n    let bullet = series.bullets.push(new am4charts.Bullet());\r\n    configWindBullet(bullet);\r\n    series.strokeWidth = 1;\r\n}\r\n\r\nexport function createCertain(chart) {\r\n    let certain = chart.tooltipContainer.createChild(am4core.Container);\r\n    certain.background.fill = am4core.color(\"#fff\");\r\n    certain.background.fillOpacity = 0.9;\r\n    certain.width = am4core.percent(100);\r\n    certain.height = am4core.percent(100);\r\n    return certain;\r\n}\r\n\r\nconst configChart = (chart, { startDate, endDate }) => {\r\n\r\n    chart.leftAxesContainer.layout = \"vertical\";\r\n    chart.rightAxesContainer.layout = \"vertical\";\r\n\r\n    chart.preloader.disabled = true;\r\n\r\n    chart.paddingRight = 30;\r\n\r\n    chart.colors.list = [\r\n        am4core.color(\"blue\"),\r\n        am4core.color(\"red\"),\r\n        am4core.color(\"green\"),\r\n        am4core.color(\"#0384fc\"),\r\n        am4core.color(\"magenta\"),\r\n        am4core.color(\"magenta\"),\r\n        am4core.color(\"white\")\r\n    ];\r\n\r\n    let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n    configDateAxis(dateAxis, startDate, endDate);\r\n/*\r\n    let pictogramAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n    configPictogramAxis(pictogramAxis);\r\n    pictogramAxis.marginTop = 10;\r\n    pictogramAxis.marginBottom = 10;\r\n*/\r\n    let percentAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n    configPercentAxis(percentAxis);\r\n    percentAxis.marginTop = 10;\r\n    percentAxis.marginBottom = 10;\r\n\r\n    let temperatureAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n    configTemperatureAxis(temperatureAxis);\r\n    temperatureAxis.marginTop = 40;\r\n    temperatureAxis.marginBottom = 10;\r\n\r\n    let temperatureAxis2 = chart.yAxes.push(new am4charts.ValueAxis());\r\n    configTemperatureAxis(temperatureAxis2);\r\n    temperatureAxis2.marginTop = 40;\r\n    temperatureAxis2.marginBottom = 10;\r\n    temperatureAxis2.renderer.opposite = true;\r\n\r\n    let speedAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n    configSpeedAxis(speedAxis);\r\n    speedAxis.marginTop = 10;\r\n    speedAxis.marginBottom = 10;\r\n    speedAxis.renderer.opposite = true;\r\n/*\r\n    let pictogramAxis2 = chart.yAxes.push(new am4charts.ValueAxis());\r\n    configPictogramAxis(pictogramAxis2);\r\n    pictogramAxis2.marginTop = 10;\r\n    pictogramAxis2.marginBottom = 10;\r\n    pictogramAxis2.renderer.opposite = true;\r\n*/\r\n    let scrollbarX = new am4charts.XYChartScrollbar();\r\n    //let scrollbarY = new am4charts.XYChartScrollbar();\r\n\r\n    // Min. day temperature\r\n    let series = chart.series.push(new am4charts.StepLineSeries());\r\n    configMinDayTemperatureSeries(series);\r\n    series.yAxis = temperatureAxis;\r\n    //scrollbarX.series.push(series);\r\n    //scrollbarY.series.push(series);\r\n\r\n    // Max. day temperature\r\n    series = chart.series.push(new am4charts.StepLineSeries());\r\n    configMaxDayTemperatureSeries(series);\r\n    series.yAxis = temperatureAxis;\r\n    //scrollbarX.series.push(series);\r\n    //scrollbarY.series.push(series);\r\n\r\n    // Dew point\r\n    series = chart.series.push(new am4charts.LineSeries());\r\n    configDewPointSeries(series);\r\n    series.yAxis = temperatureAxis;\r\n    //scrollbarX.series.push(series);\r\n    //scrollbarY.series.push(series);\r\n\r\n    // Relative humidity\r\n    series = chart.series.push(new am4charts.LineSeries());\r\n    configHumiditySeries(series);\r\n    series.yAxis = percentAxis;\r\n    scrollbarX.series.push(series);\r\n    percentAxis.renderer.line.stroke = series.stroke;\r\n    percentAxis.renderer.labels.template.fill = series.stroke;\r\n    percentAxis.title.fill = series.stroke;\r\n\r\n/*\r\n    // Weather pictogram\r\n    series = chart.series.push(new am4charts.LineSeries());\r\n    configWeatherPictogramSeries(series);\r\n    series.yAxis = pictogramAxis;\r\n*/\r\n\r\n    // Wind\r\n    series = chart.series.push(new am4charts.LineSeries());\r\n    configWindSpeedSeries(series);\r\n    series.yAxis = speedAxis;\r\n    speedAxis.renderer.line.stroke = series.stroke;\r\n    speedAxis.renderer.labels.template.fill = series.stroke;\r\n    speedAxis.title.fill = series.stroke;\r\n/*\r\n    // Wind pictogram\r\n    series = chart.series.push(new am4charts.LineSeries());\r\n    configWindPictogramSeries(series);\r\n    series.yAxis = pictogramAxis2;\r\n*/\r\n    chart.legend = new am4charts.Legend();\r\n    chart.legend.reverseOrder = true;\r\n    var markerTemplate = chart.legend.markers.template;\r\n    markerTemplate.width = 40;\r\n    markerTemplate.height = 40;\r\n    chart.legend.position = \"right\";\r\n    chart.legend.labels.template.fontSize = 12;\r\n    chart.legend.labels.template.fontWeight = 500;\r\n    chart.legend.labels.template.fontFamily = FONT;\r\n\r\n    chart.cursor = new am4charts.XYCursor();\r\n\r\n    chart.scrollbarX = scrollbarX;\r\n    //chart.scrollbarY = scrollbarY;\r\n};\r\n\r\nexport default configChart;\r\n","import { format } from 'date-fns';\r\n\r\nexport function dateString(date) {\r\n    return format(date, 'yyyy-MM-dd');\r\n}","import { isSameMonth, endOfMonth, addDays } from 'date-fns';\r\n\r\nimport { dateString } from '../util/date';\r\n\r\nfunction byMonths(dateRange) {\r\n    let dateRanges = [];\r\n    let start = new Date(dateRange.startDate);\r\n    let end = new Date(dateRange.endDate);\r\n\r\n    while (!isSameMonth(start, end)) {\r\n        let x = endOfMonth(start);\r\n        dateRanges.push({ startDate: dateString(start), endDate: dateString(x) });\r\n        start = addDays(x, 1);\r\n    }\r\n    dateRanges.push({ startDate: dateString(start), endDate: dateString(end) });\r\n\r\n    return dateRanges;\r\n}\r\n\r\nfunction fetchWeather(location, dateRange) {\r\n    const dateRanges = byMonths(dateRange);\r\n\r\n    return Promise.all(dateRanges.map((dateRange) => (\r\n        fetch(`${process.env.REACT_APP_WEATHER_URL}?key=${process.env.REACT_APP_WEATHER_KEY}` + '&' +\r\n            `q=${location.lat+','+location.lng}` + '&' +\r\n            `format=json` + '&' +\r\n            `date=${dateRange.startDate}&enddate=${dateRange.endDate}`\r\n        ).then((response) => (response.json()))\r\n    ))).then((responses) => (\r\n        responses.reduce((acc, response) => {\r\n            acc.push(...response.data.weather);\r\n            return acc;\r\n        }, [])\r\n    ));\r\n}\r\n\r\nexport default fetchWeather;","import React from 'react';\r\n\r\nimport { DotLoader } from 'react-spinners';\r\n\r\nimport './Loader.css';\r\n\r\nconst Loader = ({ size, loading }) => {\r\n\r\n    return (\r\n        <div className=\"__Loader__\">\r\n            <DotLoader\r\n                sizeUnit={\"px\"}\r\n                color={'#5ac584'}\r\n                size={size ? size : 200}\r\n                loading={loading}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loader;","import React, { useState, useEffect } from 'react';\r\n\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport theme from \"@amcharts/amcharts4/themes/moonrisekingdom\";\r\n\r\nimport configChart, { createCertain } from './chart/configChart';\r\n\r\nimport fetchWeather from '../api/fetchWeather';\r\n\r\nimport Loader from './Loader';\r\n\r\nimport './Chart.css';\r\n\r\nam4core.useTheme(theme);\r\n\r\nconst THREE_HOURS = 3 * 3600000;\r\n\r\nfunction formatTime(date, hour) {\r\n    if (hour === \"0\") {\r\n        hour = \"000\";\r\n    }\r\n    return new Date(date + ' ' + hour.substring(0, hour.length-2) + ':00');\r\n}\r\n\r\nconst Chart = ({ location, dateRange }) => {\r\n\r\n    const [ loading, setLoading ] = useState(true);\r\n\r\n    useEffect(() => {\r\n        let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n\r\n        const certain = createCertain(chart);\r\n        certain.show();\r\n\r\n        fetchWeather(location, dateRange).then((weather) => {\r\n\r\n            configChart(chart, dateRange);\r\n\r\n            chart.data = weatherData(weather);\r\n\r\n            setTimeout(() => {\r\n                certain.hide();\r\n                setLoading(false);\r\n            }, 1000);\r\n        });\r\n\r\n        return function cleanup() {\r\n            chart.dispose();\r\n        };\r\n    }, []);\r\n\r\n    const weatherData = (weather) => {\r\n\r\n        let data = [];\r\n        let millis = 0;\r\n\r\n        weather.forEach((day, i) => {\r\n            if (millis === 0) {\r\n                millis = new Date(day.date).getTime();\r\n            }\r\n\r\n            day.hourly.forEach((hour) => {\r\n                let item = {\r\n                    date: millis,\r\n                    DewPointC: hour.DewPointC,\r\n                    Humidity: hour.humidity,\r\n                    WeatherPictogram: 2,\r\n                    WindPictogram: 1,\r\n                    weatherDesc: hour.weatherDesc.length ? hour.weatherDesc[0].value : '',\r\n                    weatherIconUrl: hour.weatherIconUrl.length ? hour.weatherIconUrl[0].value : null,\r\n                    winddirDegree: hour.winddirDegree,\r\n                    windspeedKmph: hour.windspeedKmph,\r\n                    mintempC: day.mintempC,\r\n                    maxtempC: day.maxtempC\r\n                };\r\n                data.push(item);\r\n                millis += THREE_HOURS;\r\n            });\r\n        });\r\n\r\n        return data;\r\n    };\r\n\r\n    return (\r\n        <div className=\"__Chart__\">\r\n            <Loader loading={loading} />\r\n            <div id=\"chartdiv\" className=\"chart\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chart;","import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { format } from 'date-fns';\r\n\r\nimport { Button } from 'reactstrap';\r\n\r\nimport { useQuery, defaultName } from '../util/query';\r\n\r\nimport { START_DATE, END_DATE, LONDON_LATLNG } from './constants';\r\n\r\nimport Chart from './Chart';\r\n\r\nimport './Weather.css';\r\n\r\nconst displayedDate = (str) => (format(new Date(str), 'MMM d'));\r\n\r\nconst Weather = () => {\r\n\r\n    const query = useQuery();\r\n\r\n    const [ location ] = useState({\r\n        lat: query.get(\"lat\", LONDON_LATLNG.lat),\r\n        lng: query.get(\"lng\", LONDON_LATLNG.lng)\r\n    });\r\n    const [ dateRange ] = useState({\r\n        startDate: query.get(\"startDate\", START_DATE),\r\n        endDate: query.get(\"endDate\", END_DATE)\r\n    });\r\n    const [ name ] = useState(query.get(\"name\", defaultName(query)));\r\n\r\n    const [ parameters, setParameters ] = useState(false);\r\n\r\n    const handleParameters = () => {\r\n        setParameters(true);\r\n    }\r\n\r\n    return parameters ? (\r\n        <Redirect to={'/parameters?' + \r\n            `lat=${location.lat}` + '&' +\r\n            `lng=${location.lng}` + '&' +\r\n            `name=${name}` + '&' +\r\n            `startDate=${dateRange.startDate}` + '&' +\r\n            `endDate=${dateRange.endDate}`\r\n        } />\r\n    ) : (\r\n        <div className=\"__Weather__\">\r\n            <div className=\"weather-info\">\r\n                <h5 className=\"name\">{name}</h5>\r\n                <h5 className=\"date-range\">{displayedDate(dateRange.startDate) + ' - ' + displayedDate(dateRange.endDate)}</h5>\r\n                <Button color=\"primary\" type=\"button\" onClick={handleParameters} className=\"button\">Parameters</Button>\r\n            </div>\r\n            <Chart location={location} dateRange={dateRange} />\r\n            <a href=\"https://www.worldweatheronline.com/developer/\" className=\"weather-reference\" target=\"_blank\" rel=\"noopener\">Powered by World Weather Online</a>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Weather;","import React, { useState } from 'react';\r\nimport { DateRangePicker } from 'react-date-range';\r\nimport { format } from 'date-fns';\r\n\r\nimport { Button, Popover, PopoverBody } from 'reactstrap';\r\n\r\nimport './DateRange.css';\r\n\r\nconst DATE_FORMAT = \"MMM d, yyyy\";\r\n\r\nconst DateRange = ({ startDate, endDate, onChange }) => {\r\n\r\n    const [popoverOpen, setPopoverOpen] = useState(false);\r\n\r\n    const toggle = () => {\r\n        setPopoverOpen((open) => (!open));\r\n    };\r\n\r\n    const handleSelect = (item) => {\r\n        onChange(item.selection);\r\n    };\r\n\r\n    return (\r\n        <div className=\"__DateRange__\">\r\n            <div className=\"daterange\">\r\n                <h5 className=\"title\">Date range:</h5>\r\n                <div className=\"range\" id=\"popover\">\r\n                    <h5 className=\"text\">{format(startDate, DATE_FORMAT)} - {format(endDate, DATE_FORMAT)}</h5>\r\n                    <Button outline={!popoverOpen} color=\"secondary\" className=\"change\">{popoverOpen ? \"Done\" : \"Change\"}</Button>\r\n                </div>\r\n            </div>\r\n            <Popover placement=\"bottom\" isOpen={popoverOpen} target=\"popover\" toggle={toggle}>\r\n                <PopoverBody>\r\n                    <DateRangePicker\r\n                        showSelectionPreview={true}\r\n                        moveRangeOnFirstSelection={false}\r\n                        maxDate={new Date()}\r\n                        months={2}\r\n                        direction=\"horizontal\"\r\n                        ranges={[{ startDate, endDate, key: 'selection' }]}\r\n                        onChange={handleSelect}\r\n                    />\r\n                </PopoverBody>\r\n            </Popover>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DateRange;","import React, { useEffect } from 'react';\r\nimport L from 'leaflet';\r\n\r\nimport Geocoder from 'leaflet-control-geocoder';\r\n\r\nimport './Location.css';\r\n\r\nimport icon from 'leaflet/dist/images/marker-icon.png';\r\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\r\n\r\nconst DefaultIcon = L.icon({\r\n    iconUrl: icon,\r\n    shadowUrl: iconShadow,\r\n\r\n    iconSize:     [25, 41], // size of the icon\r\n    shadowSize:   [41, 41], // size of the shadow\r\n    iconAnchor:   [13, 41], // point of the icon which will correspond to marker's location\r\n    shadowAnchor: [13, 41], // the same for the shadow\r\n    popupAnchor:  [0, -27]  // point from which the popup should open relative to the iconAnchor\r\n});\r\n\r\nL.Marker.prototype.options.icon = DefaultIcon;\r\n\r\nconst Location = ({ latlng, query, onChange }) => {\r\n\r\n    useEffect(() => {\r\n\r\n        // onChange callback\r\n        const handleChange = (result) => {\r\n            onChange({ latlng: [result.center.lat, result.center.lng], name: result.name });\r\n        };\r\n\r\n        // create map\r\n        const map = L.map('map', {\r\n            center: latlng,\r\n            zoom: 16,\r\n            zoomControl: false,\r\n            layers: [\r\n                L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {\r\n                attribution:\r\n                    '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                })\r\n            ]\r\n        });\r\n\r\n        L.control.zoom({\r\n            position:'topright'\r\n        }).addTo(map);\r\n\r\n        const geocoder = new L.Control.Geocoder.Nominatim();\r\n\r\n        const geocoderControl = L.Control.geocoder({\r\n            collapsed: true,\r\n            position: \"topleft\",\r\n            geocoder: geocoder,\r\n            query: query,\r\n            suggestMinLength: 3,\r\n            placeholder: \"Search query or lat,lng\"\r\n        }).on('markgeocode', function(e) {\r\n\r\n            handleChange(e.geocode);\r\n\r\n            setTimeout(() => {\r\n                geocoderControl._expand();\r\n            }, 500);\r\n        }).on('collapse', function() {\r\n            setTimeout(() => {\r\n                geocoderControl._expand();\r\n            }, 500);\r\n        }).addTo(map);\r\n\r\n        geocoderControl._toggle = geocoderControl._geocode;\r\n        \r\n        const searchInput = document.querySelector('.leaflet-control-geocoder-form input');\r\n\r\n        const markGeocode = (result) => {\r\n            if (!result.bbox) {\r\n                result.bbox = L.latLngBounds(result.center, result.center);\r\n            }\r\n            if (!result.html && !result.name) {\r\n                result.html = `[${result.center.lat}, ${result.center.lng}]`;\r\n                result.name = '';\r\n            }\r\n            geocoderControl.markGeocode(result);\r\n\r\n            handleChange(result);\r\n\r\n            setTimeout(() => {\r\n                geocoderControl._expand();\r\n            }, 500);\r\n        }\r\n\r\n        geocoder.geocode(query, (results) => {\r\n            const result = results.length ? results[0] : { center: L.latLng(latlng) };\r\n            markGeocode(result);\r\n        });\r\n\r\n        map.on('expand', function() {\r\n            searchInput.focus();\r\n        });\r\n\r\n        map.on('dblclick', function(event) {\r\n            const latlng = L.latLng(event.latlng);\r\n            geocoder.reverse(latlng, 1, (results) => {\r\n                searchInput.value = \"\" + latlng.lat + \".\" + latlng.lng;\r\n                let result = results.length ? results[0] : {};\r\n                result = { ...result, center: latlng };\r\n                markGeocode(result);\r\n            });\r\n        });\r\n\r\n        setTimeout(() => {\r\n            geocoderControl._expand();\r\n\r\n        }, 500);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"__Location__\">\r\n            <h5 className=\"title\">Location (search or double click on map):</h5>\r\n            <div id=\"map\" className=\"leaflet-map\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Location;","import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router';\r\n\r\nimport { Button } from 'reactstrap';\r\n\r\nimport { useQuery, defaultName } from '../util/query';\r\n\r\nimport { dateString } from '../util/date';\r\n\r\nimport DateRange from './parameters/DateRange';\r\nimport Location from './parameters/Location';\r\n\r\nimport { START_DATE, END_DATE, LONDON_LATLNG } from './constants';\r\n\r\nimport './Parameters.css';\r\n\r\n\r\nconst Parameters = () => {\r\n    const [ weather, setWeather ] = useState(false);\r\n\r\n    const query = useQuery();\r\n\r\n    const startDate = new Date(query.get(\"startDate\", START_DATE));\r\n    const endDate = new Date(query.get(\"endDate\", END_DATE));\r\n\r\n    const latlng = [ parseFloat(query.get(\"lat\", LONDON_LATLNG.lat)), parseFloat(query.get(\"lng\", LONDON_LATLNG.lng)) ];\r\n    const name = query.get('name', defaultName(query));\r\n\r\n    const [ dateRange, setDateRange ] = useState({\r\n        startDate,\r\n        endDate\r\n    });\r\n    const [ location, setLocation ] = useState({\r\n        latlng,\r\n        name\r\n    });\r\n\r\n    const handleWeatherClick = () => {\r\n        setWeather(true);\r\n    }\r\n\r\n    return weather ? (\r\n        <Redirect to={'/?' +\r\n            `lat=${location.latlng[0].toFixed(3)}` + '&' +\r\n            `lng=${location.latlng[1].toFixed(3)}` + '&' +\r\n            `name=${location.name}` + '&' +\r\n            `startDate=${dateString(dateRange.startDate)}` + '&' +\r\n            `endDate=${dateString(dateRange.endDate)}`\r\n        } />\r\n    ) : (\r\n        <div className=\"__Parameters__\">\r\n            <div className=\"weather-button\">\r\n                <DateRange startDate={dateRange.startDate} endDate={dateRange.endDate} onChange={setDateRange} />\r\n                <Button color=\"primary\" className=\"button\" onClick={handleWeatherClick}>Show Weather</Button>\r\n            </div>\r\n            <Location latlng={latlng} query={name} onChange={setLocation} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Parameters;","import React from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route\r\n} from \"react-router-dom\";\r\n\r\nimport Weather from './components/Weather';\r\nimport Parameters from './components/Parameters';\r\n\r\nconst Main = () => {\r\n\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route path=\"/parameters\">\r\n                    <Parameters />\r\n                </Route>\r\n                <Route path=\"/\">\r\n                    <Weather />\r\n                </Route>\r\n            </Switch>\r\n      </Router>  \r\n    );\r\n};\r\n\r\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './Main';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// leaflet styles\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet-control-geocoder/Control.Geocoder.css';\n\n// react-date-range styles\nimport 'react-date-range/dist/styles.css'; // main style file\nimport 'react-date-range/dist/theme/default.css'; // theme css file\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}